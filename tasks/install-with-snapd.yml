---
- name: Ensure snapd is installed
  ansible.builtin.apt:
    name: snapd
    state: present
    update_cache: true

- name: Ensure snapd is enabled
  ansible.builtin.systemd:
    name: snapd.socket
    enabled: true
    state: started

- name: Ensure snapd is installed and 'trust-plugin-with-root=ok' is set
  community.general.snap:
    name: certbot
    classic: true
    state: present
    options:
      - trust-plugin-with-root=ok

- name: Install certbot-dns-plugins
  community.general.snap:
    name: certbot-dns-{{ item }}
    state: present
  loop: "{{ certbot_dns_plugins }}"
  when: certbot_dns_plugins | length > 0

- name: Symlink certbot into place
  ansible.builtin.file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link

- name: Set Certbot script variable.
  ansible.builtin.set_fact:
    certbot_script: /usr/bin/certbot

- name: Ensure pre and post hook folders exist
  ansible.builtin.file:
    path: /etc/letsencrypt/renewal-hooks/{{ item }}
    state: directory
    mode: 0755
    owner: root
    group: root
  loop:
    - pre
    - post

- name: Create post hook to restart services
  template:
    src: ./templates/restart_services.sh.j2
    dest: /etc/letsencrypt/renewal-hooks/post/restart_services.sh
    owner: root
    group: root
    mode: 0750
  when:
    - certbot_restart_services is defined
    - certbot_restart_services

- name: Ensure /etc/letsencrypt/secrets exists
  ansible.builtin.file:
    path: /etc/letsencrypt/secrets
    state: directory
    mode: 0700
    owner: root
    group: root

- name: Create dns secrets credentials files
  ansible.builtin.template:
    src: dns_secrets.ini.j2
    dest: /etc/letsencrypt/secrets/dns-{{ item }}.ini
    owner: root
    group: root
    mode: 0600
  loop: "{{ certbot_dns_plugins }}"
